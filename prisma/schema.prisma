// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  address           String
  mapIframe         String?
  PlannedEvent      PlannedEvent[]
  ScheduledEvent    ScheduledEvent[]
  ScheduleException ScheduleException[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model PlannedEvent {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  date        DateTime
  location    Location @relation(fields: [locationId], references: [id])
  locationId  Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScheduledEvent {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  weekday     Int
  time        String
  location    Location @relation(fields: [locationId], references: [id])
  locationId  Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScheduleException {
  id   Int      @id @default(autoincrement())
  date DateTime // Date when the exception occurs

  // Exception can be either for a specific location or global (owner unavailable)
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
