generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ScheduleType {
  RECURRING
  SINGLE
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  role         UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
  phone String

  Booking Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  summary     String
  description String

  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  summary     String
  description String
  address     String
  mapUrl      String?

  Event          Event[]
  Unavailability Unavailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id Int @id @default(autoincrement())

  price Float

  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int

  type    ScheduleType
  date    DateTime?
  weekday Weekday?
  time    String?

  Booking Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unavailability {
  id         Int       @id @default(autoincrement())
  dateFrom   DateTime
  dateTo     DateTime
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
  reason     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id       Int      @id @default(autoincrement())
  title    String
  message  String
  dateFrom DateTime
  dateTo   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id Int @id @default(autoincrement())

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  guests   Int
  datetime DateTime

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  BookingStatus BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
