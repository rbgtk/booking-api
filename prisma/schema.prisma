// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Location {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  address     String
  iframe      String?

  schedules    ScheduleTemplate[]
  exceptions   ScheduleException[]
  PrivateEvent PrivateEvent[]
  Reservation  Reservation[]
}

model ScheduleTemplate {
  id         Int      @id @default(autoincrement())
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  weekday Int // 0=Sunday, 1=Monday, ..., 6=Saturday
  time    String // "19:00" for 7pm, or DateTime if needed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleException {
  id   Int      @id @default(autoincrement())
  date DateTime // Date when the exception occurs

  // Exception can be either for a specific location or global (owner unavailable)
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int? // nullable => if null, it's an owner exception

  reason String?
}

model PrivateEvent {
  id   Int      @id @default(autoincrement())
  date DateTime
  time String // or DateTime for combined date+time if easier

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  guestName  String
  guestEmail String
  guestPhone String?

  status EventStatus @default(PENDING) // PENDING, ACCEPTED, REJECTED

  paymentStatus PaymentStatus @default(PENDING)

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id Int @id @default(autoincrement())

  eventDate DateTime // actual date (based on schedule + exceptions)
  time      String // "19:00"

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  guestName  String
  guestEmail String
  guestPhone String?

  paymentStatus PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

