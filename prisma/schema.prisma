// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ScheduleType {
  RECURRING
  ONE_TIME
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ReservationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  User
  Admin
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  userRole     UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
  phone String

  Reservation Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  summary     String
  description String
  address     String
  mapUrl      String?

  Event          Event[]
  Unavailability Unavailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int

  schedules    Schedule[]
  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id      Int          @id @default(autoincrement())
  type    ScheduleType
  date    DateTime?
  weekday Weekday?
  time    String?

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unavailability {
  id         Int       @id @default(autoincrement())
  date       DateTime
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
  reason     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id         Int               @id @default(autoincrement())
  customer   Customer          @relation(fields: [customerId], references: [id])
  customerId Int
  event      Event             @relation(fields: [eventId], references: [id])
  eventId    Int
  date       DateTime // The actual date of this reservation (for one-time or recurring events)
  status     ReservationStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id       Int      @id @default(autoincrement())
  title    String
  message  String
  dateFrom DateTime
  dateTo   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
